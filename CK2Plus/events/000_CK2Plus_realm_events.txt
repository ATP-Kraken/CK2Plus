namespace = realmPlus

#######################################
#
# CK2Plus Realm Events
#
#######################################
#
# CATALOG
#
# 001 - 099: High Priority Events
# 100 - 199: Imperial Events
# 200 - 299: Kingdom Events
# 300 - 399: Ducal Events
# 400 - 499: County Events
# 500 - 500: Patrician (Baron) Events
# 600 - 699: General Realm Events
#
#######################################



#######################################
#
# 001 - 099: High Priority Events
#
#######################################
#
# INDEX
#
# 002: Mark exceptions to Crown Authority destruction rule
# 003: Crown setup
# 004: Imperial Decadence setup
#
#######################################

# 002: Mark exceptions to Crown Authority destruction rule
character_event = {
	id = realmPlus.002

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes

	trigger = {
		is_save_game = no
		higher_tier_than = DUKE
		any_demesne_title = {
			has_law = crown_authority_0
			NOT = { has_title_flag = do_not_destroy }
		}
	}

	immediate = {
		any_demesne_title = {
			limit = { has_law = crown_authority_0 }
			set_title_flag = do_not_destroy
		}
	}
}

# 004: Imperial Decadence setup
# NOTE: Needs reworked
character_event = {
	id = realmPlus.004

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_save_game = no
		real_tier = EMPEROR
		is_offmap_trigger = no
		is_nomadic = no
		uses_decadence = no
	}

	immediate = {
		character_event = { id = Plus.1852 days = 1 }
	}
}

#######################################
#
# 100 - 199: Imperial Events
#
#######################################
#
# INDEX
#
# 100: Imperial Destruction
# 101: Emperor picks between two held empires
# 102: Copy imperial laws to held kingdoms
# 103: Special Destruction Mechanic for HRE, Byzantium, and Latin Empire
#
#######################################

# 100: Imperial Destruction
character_event = {
	id = realmPlus.100
	picture = "GFX_evt_council"
	desc = EVTDESC_Plus_303

	is_triggered_only = yes

	only_independent = yes
	only_playable = yes
	war = no

	trigger = {
		real_tier = EMPEROR
		is_nomadic = no
		num_of_emperor_titles == 1
		OR = {
			realm_size < 100
			num_of_count_titles_in_realm < 35
		}
		NOR = {
			num_of_emperor_titles >= 2
			primary_title = { is_landless_type_title = yes }
			is_offmap_trigger = yes
		}
		# Exceptions
		primary_title = {
			NOR = {
				title = e_byzantium
				title = e_hre
			}
		}
	}

	immediate = {
		# Emergency Kingdom for dumb emperors (usually AI)
		if = {
			limit = {
				num_of_king_titles == 0
				capital_scope = { kingdom = { has_holder = no } }
			}
			capital_scope = { kingdom = { gain_title = ROOT } }
		}
		else = {
			log = "Unable to create emergency kingdom when shattering empire. Ruler rank demoted."
		}
		# You are the weakest link, goodbye.
		primary_title = { destroy_landed_title = THIS }
	}

	option = {
		name = "EVTOPTA_Plus_303"
		prestige = -1000
	}
}

# 101: Emperor picks between two held empires
character_event = {
	id = realmPlus.101
	is_triggered_only = yes

	picture = GFX_evt_coronation

	only_independent = yes
	only_playable = yes

	trigger = {
		is_nomadic = no
		real_tier = EMPEROR
		num_of_emperor_titles >= 2
	}

	weight_multiplier = { days = 1 }

	immediate = {
		primary_title = { save_event_target_as = current_title }
		random_demesne_title = {
			limit = {
				tier = EMPEROR
				NOT = { title = event_target:current_title }
			}
			save_event_target_as = new_title
		}
	}

	desc = EVTDESC_Plus_1854

	option = {
		name = EVTOPTA_Plus_1854 # I will assume the new title

		hidden_effect = {
			event_target:new_title = { make_primary_title = yes }
			event_target:current_title = {
				any_vassal = { set_defacto_liege = ROOT }
			}

			clr_character_flag = must_grant_empire_flag
		}

		event_target:current_title = { unsafe_destroy_landed_title = THIS }

		ai_chance = {
			factor = 20

			trigger = {
				NOR = {
					event_target:current_title = { culture = ROOT }
					AND = {
						event_target:current_title = { is_titular = no }
						event_target:new_title = { is_titular = yes }
					}
				}
			}

			modifier = {
				factor = 0.1
				event_target:current_title = {
					capital_scope = { culture = ROOT }
				}
			}
		}
	}
	option = {
		name = EVTOPTB_Plus_1854 # I will keep my current title

		hidden_tooltip = {
			event_target:new_title = {
				any_vassal = { set_defacto_liege = ROOT }
			}

			clr_character_flag = must_grant_empire_flag
		}

		event_target:new_title = { unsafe_destroy_landed_title = THIS }

		ai_chance = {
			factor = 50

			trigger = {
				NOR = {
					event_target:new_title = { culture = ROOT }
					AND = {
						event_target:current_title = { is_titular = yes }
						event_target:new_title = { is_titular = no }
					}
				}
			}

			modifier = {
				factor = 0.1
				event_target:new_title = {
					capital_scope = { culture = ROOT }
				}
			}
		}
	}
	option = {
		name = EVTOPTC_Plus_1854 # I will give the second title to someone else

		trigger = {
			is_tributary = no
			NOT = { has_character_flag = must_grant_empire_flag }
			event_target:new_title = { is_titular = no }
			event_target:current_title = { is_titular = no }
		}

		custom_tooltip = {
			text = GRANT_EMPIRE_WITHIN_30_DAYS
			hidden_tooltip = {
				set_character_flag = must_grant_empire_flag
				character_event = {
					id = realmPlus.101
					days = 30
				}
			}
		}

		ai_chance = {
			factor = 0
		}
	}

	after = {
		clear_event_target = current_title
		clear_event_target = new_title
		# In case the ruler somehow had more than two empires
		if = {
			limit = {
				ROOT = {
					num_of_emperor_titles >= 2
					NOT = { has_character_flag = must_grant_empire_flag }
				}
			}
			character_event = {
				id = realmPlus.101
				days = 1
			}
		}
	}
}

# 102: Copy imperial laws to held kingdoms
character_event = {
	id = realmPlus.102
	is_triggered_only = yes
	hide_window = yes

	only_independent = yes
	only_playable = yes

	trigger = {
		real_tier = EMPEROR
		any_demesne_title = {
			tier = KING
			holder = ROOT # Safety check because I don't trust paradox
		}
	}

	weight_multiplier = { days = 1 }

	immediate = {
		primary_title = { save_event_target_as = primaryTitle }
		any_demesne_title = {
			limit = {
				tier = KING
				holder = ROOT
			}
			copy_title_laws = event_target:primaryTitle
		}
	}

	after = {
		clear_event_target = primaryTitle
	}
}

# 103: Special Destruction Mechanic for HRE, Byzantium, and Latin Empire
character_event = {
	id = realmPlus.103
	is_triggered_only = yes

	picture = GFX_evt_council

	only_independent = yes
	only_playable = yes

	trigger = {
		real_tier = EMPEROR
		is_nomadic = no
		num_of_emperor_titles == 1

		trigger_if = {
			limit = { has_landed_title = e_byzantium }

			NOT = { religion = chalcedonian }
			is_orthodox_branch = no
			religion_openly_hellenic_or_reformed_trigger = no
		}
		trigger_else_if = {
			limit = { has_landed_title = e_hre }

			NOT = { religion = chalcedonian }
			is_catholic_branch = no
		}
		trigger_else_if = {
			limit = { has_landed_title = e_latin_empire }

			is_catholic_branch = no
			num_of_count_titles_in_realm >= 35
			realm_size >= 100
		}
		trigger_else = {
			always = no
		}
	}

	immediate = {
		primary_title = { save_event_target_as = current_title }
		if = {
			limit = {
				num_of_count_titles_in_realm >= 35
				realm_size >= 100
			}

			if = {
				limit = {
					has_landed_title = e_byzantium
					is_catholic_branch = yes
				}
				e_latin_empire = { save_event_target_as = emergency_title }
			}
			else_if = {
				limit = {
					has_landed_title = e_hre
				}
				e_germania = { save_event_target_as = emergency_title }
			}
			else_if = {
				limit = {
					has_landed_title = e_latin_empire
					is_orthodox_branch = yes
				}
				e_byzantium = { save_event_target_as = emergency_title }
			}
			else = {
				set_character_flag = needs_emergency_empire
			}

			if = {
				limit = {
					event_target:emergency_title = { has_holder = yes }
				}
				set_character_flag = needs_emergency_empire
				clear_event_target = emergency_title
			}
		}
		else = {
			set_character_flag = too_small_for_emergency_empire
		}
	}

	desc = {
		text = EVTDESC_Plus_328
		trigger = {
			has_landed_title = e_byzantium
		}
	}
	desc = {
		text = EVTDESC_Plus_338
		trigger = {
			has_landed_title = e_hre
		}
	}
	desc = {
		text = EVTDESC_Plus_327
		trigger = {
			has_landed_title = e_latin_empire
		}
	}

	option = {
		name = I_WILL_CONVERT
		trigger = {
			NOT = { trait = zealous }
		}

		trigger_switch = {
			on_trigger = has_landed_title

			e_byzantium = {
				if = {
					limit = {
						c_constantinopolis = {
							location = {
								culture = roman
								religion_group = pagan_group
							}
						}
					}
					religion = roman_pagan
				}
				else_if = {
					limit = {
						c_constantinopolis = {
							location = { religion_group = pagan_group }
						}
						hellenic_pagan = { has_flag = has_been_reformed }
					}
					religion = hellenic_pagan_reformed
				}
				else_if = {
					limit = {
						c_constantinopolis = {
							location = { religion_group = pagan_group }
						}
					}
					religion = hellenic_pagan
				}
				else = {
					random_character = {
						limit = {
							is_orthodox_branch = yes
							is_heretic = no
						}
						reverse_religion = ROOT
					}
				}
			}
			e_hre = {
				random_character = {
					limit = {
						is_catholic_branch = yes
						is_heretic = no
					}
					reverse_religion = ROOT
				}
			}
			e_latin_empire = {
				random_character = {
					limit = {
						is_catholic_branch = yes
						is_heretic = no
					}
					reverse_religion = ROOT
				}
			}
		}

		add_character_modifier = {
			name = recently_converted
			duration = 730
		}

		ai_chance = {
			factor = 5

			trigger = {
				NOT = { trait = content }
			}
		}
	}
	option = {
		name = OK
		trigger = {
			has_character_flag = too_small_for_emergency_empire
		}

		# Emergency Kingdom for dumb emperors (usually AI)
		if = {
			limit = {
				num_of_king_titles == 0
				capital_scope = { kingdom = { has_holder = no } }
			}
			capital_scope = { kingdom = { gain_title = ROOT } }
		}
		else = {
			log = "Unable to create emergency kingdom when shattering empire. Ruler rank demoted."
		}
		# You are the weakest link, goodbye.
		primary_title = { destroy_landed_title = THIS }

		ai_chance = {
			factor = 2
		}
	}
	option = {
		name = OK
		trigger = {
			NOT = { has_character_flag = too_small_for_emergency_empire }
		}

		set_character_flag = centralize_without_penalties

		if = {
			limit = { has_character_flag = needs_emergency_empire }

			capital_scope = {
				kingdom = {
					create_title = {
						base_title = THIS
						culture = ROOT
						custom_created = yes
						holder = ROOT
						landless = no
						temporary = no
						tier = EMPEROR
					}
					new_title = {
						save_event_target_as = emergency_title
					}
				}
			}

			clr_character_flag = needs_emergency_empire
		}

		event_target:emergency_title = {
			gain_title = ROOT
			hidden_effect = {
				copy_title_laws = event_target:current_title
				copy_title_history = event_target:current_title
			}
		}
		hidden_effect = {
			event_target:current_title = {
				any_realm_character = {
					if = {
						limit = { has_strong_claim = PREV }
						remove_claim = PREV
						add_pressed_claim = event_target:emergency_title
					}
					else_if = {
						limit = { has_weak_claim = PREV }
						remove_claim = PREV
						add_weak_pressed_claim = event_target:emergency_title
					}
				}
				destroy_landed_title = THIS
			}

			any_vassal = {
				limit = {
					NOT = { has_character_flag = considered_for_independence }
					primary_title = {
						de_jure_liege_or_above = event_target:current_title
					}
				}

				character_event = { id = Plus.430 days = 3 }
			}
		}

		ai_chance = {
			factor = 2
		}
	}

	after = {
		clear_event_target = current_title
		clear_event_target = emergency_title
		ROOT = { clr_character_flag = too_small_for_emergency_empire }
	}
}

#######################################
#
# 600 - 699: General Realm Events
#
#######################################
#
# INDEX
#
# 600: AI Abandon Baronies orphaned in another realm
# 601: Family members inherit half of previous ruler's Dishonorable or Tyrant
# 602: Dishonorable Trait Degredation
# 603: Tyrant Trait Degredation
#
#######################################

# 600: AI Abandon Baronies orphaned in another realm
character_event = {
	id = realmPlus.600
	is_triggered_only = yes
	hide_window = yes

	ai = yes
	is_patrician = no
	only_rulers = yes
	war = no

	trigger = {
		controls_religion = no
		mercenary = no
		is_ruler = yes
		any_demesne_title = {
			tier = baron
			dejure_liege_title = {
				holder_scope = {
					NOT = { same_realm = ROOT }
				}
			}
		}
		NOR = {
			any_liege = { ai = no}
			government = order_government
			rightful_religious_head = ROOT
		}
	}

	weight_multiplier = { days = 1 }

	immediate = {
		any_demesne_title = {
			limit = {
				tier = baron
				dejure_liege_title = {
					holder_scope = {
						NOT = { same_realm = ROOT }
					}
				}
			}
			save_event_target_as = orphaned_barony
			dejure_liege_title = {
				holder_scope = {
					gain_title = event_target:orphaned_barony
				}
			}
			clear_event_target = orphaned_barony
		}
	}
}

# 601: Family members inherit half of previous ruler's Dishonorable or Tyrant
character_event = {
	id = realmPlus.601
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		FROMFROM = {
			is_close_relative = ROOT
			OR = {
				check_variable = {
					which = tyrant
					value >= 2
				}
				check_variable = {
					which = dishonorable
					value >= 2
				}
			}
		}
	}

	immediate = {
		FROMFROM = {
			# Dishonorable Trait
			if = {
				limit = {
					check_variable = {
						which = dishonorable
						value >= 2
					}
				}
				# Inherit half
				divide_variable = {
					which = dishonorable
					value = 2
				}
				# Add to new ruler tyranny
				ROOT = {
					change_variable = {
						which = dishonorable
						which = PREV
					}
					dishonorable_trait_effect = yes
				}
				# Set it back how it was for previous ruler
				multiply_variable = {
					which = dishonorable
					value = 2
				}
			}

			# Tyrant Trait
			if = {
				limit = {
					check_variable = {
						which = tyrant
						value >= 2
					}
				}
				# Inherit half
				divide_variable = {
					which = tyrant
					value = 2
				}
				# Add to new ruler tyranny
				ROOT = {
					change_variable = {
						which = tyrant
						which = PREV
					}
					tyrant_trait_effect = yes
				}
				# Set it back how it was for previous ruler (in case they're still a ruler)
				multiply_variable = {
					which = tyrant
					value = 2
				}
			}
		}
	}
}

# 604: Tributary Maintenance
character_event = {
	id = realmPlus.604
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		trigger_if = {
			limit = { is_tributary = no }
			check_variable = {
				which = tributary_years
				value > 0
			}
		}
	}

	immediate = {
		# Remove tributary status if either tributary or overlord vassalized
		if = {
			limit = {
				is_tributary = yes
				OR = {
					independent = no
					suzerain = { independent = no }
				}
			}
			suzerain = {
				log = "---> [This.GetBestName] was removed as suzerain of [Root.GetBestName], as one of them is not independent"
				remove_tributary = ROOT
			}
		}

		# Clear tributary years if no longer a tributary
		if = {
			limit = { is_tributary = no }
			set_variable = {
				which = tributary_years
				value = 0
			}
		}
		else = {
			# Transfer tributary years to another title
			if = {
				limit = {
					any_demesne_title = {
						is_primary_holder_title = no
						check_variable = {
							which = tributary_years
							value > 0
						}
					}
				}
				random_demesne_title = {
					limit = {
						is_primary_holder_title = no
						check_variable = {
							which = tributary_years
							value > 0
						}
					}
					holder_scope = {
						primary_title = {
							change_variable = {
								which = tributary_years
								which = PREVPREV
							}
						}
					}
					set_variable = {
						which = tributary_years
						value = 0
					}
				}
			}

			# Increment Years
			change_variable = {
				which = tributary_years
				value = 1
			}
		}
	}
}