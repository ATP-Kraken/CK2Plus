namespace = Plus

#######################################
# NOTE: These will be broken into groups upon further clean-up
# Maintenance Events
# ID Plus.300 - Plus.399
#######################################
#
# INDEX
#
# 327: Convert Latin Empire to Byzantine Empire if the holder is no longer Catholic
# 328: Byzantium Auto-Destroy Mechanic. Destroys Byzantium if the title holder is not Orthodox or Hellenic
# 329: Norman conquest of England cleanup - Victory: France loses claims
# 330: Norman conquest of England cleanup - Loss: English provinces (back) to England
# 331: Fix changed CoA's and names
# 332: Stops construction of the Third Temple if it is underway
# 333: Finishes construction of the Third Temple
# 334: Adds the flag for the 'Civilize a Province' ambition
# 336: Get rid of siege effects once war is done
# 337: Clear siege modifiers/hiding trait if imprisoned
# 338: HRE Auto-Destroy Mechanic. Destroys the HRE if the ruler is no longer Catholic (or replacement heresy)
# 339: Change scarred/beauty trait on females
# 340: Clean up 'children serving in holy orders' chains upon appropriate parent death
# 341: Ultimatum to overthrown rulers who re-inherit the throne
# 342: Ultimatum to overthrown rulers who re-inherit the throne
# 343: Secondary Startup Event for RD rulers
# 344: Adds Uncrowned trait to all new independent kings and emperors
# 345: Removes In Hiding trait from characters who no longer have someone to remove it
# 346: Removes austerity modifier from non-AI characters
# 347: Secondary Startup event
# 348: Viceroys will try to pass on wealth to a relative instead of their liege
# 349: Annual maintenance fixes
# 350: Fixing antipope removal
# 351: Prevents quick rebellions in newly-conquered provinces
# 352: Refills levy holdings after switching to feudal
# 353: Adds Away From Court modifier when leading armies away from the capital
# 354: Removes Away From Court modifier
# 355: Removes child's strong claim to viceroyalty
# 356: Removes claims for dead rulers
# 357: FREE
# 358: Adds daughters to early bookmarks
# 359: Religion head title inherited by someone who isn't the right religion
# 360: Religion head loses all claims as they gain the title
# 361: Lowborn marries a Duke or above
# 362: Rebel/Adventurer imprisoned after loss
# 363: Rebel/Adventurer imprisoned after loss
# 364: Copy liege inheritance laws after giving title
# 365: Copy liege inheritance laws after giving title
# 366: Restore original name if title with regnal names is inherited by secular ruler
# 367: Main greeting event
# 368: Deal with landed varangians
# 369: Greeting event - bounce from Plus startup event
# 370: Gender law Plus
# 371: Main Maintenance Event
# 372: Checksum Warning Event
# 373: ERE roman localisation
# 374: Fix RD Immortal bounce
# 375: Fix RD Immortal
#
#######################################

# 327: Convert Latin Empire to Byzantine Empire if the holder is no longer Catholic
character_event = {
	id = Plus.327
	desc = "EVTDESC_Plus_327"
	picture = "GFX_evt_council"

	is_triggered_only = yes
	hide_from = yes

	only_independent = yes
	only_playable = yes

	trigger = {
		OR = {
			NOT = { has_character_flag = checked_for_le_autodestruct }
			had_character_flag = { flag = checked_for_le_autodestruct days = 90 }
		}
		has_landed_title = e_latin_empire
		NOT = {
			any_realm_title = {
				NOT = { title = e_latin_empire }
				tier = EMPEROR
			}
		}
		NOR = {
			religion = chalcedonian
			is_catholic_branch = yes
		}
		war = no
	}

	immediate = { set_character_flag = checked_for_le_autodestruct }

	option = {
		name = "OK"
		if = {
			limit = {
				OR = {
					e_byzantium = { has_holder = yes }
					NOR = {
						religion = chalcedonian
						religion = orthodox
						religion = bogomilist
						religion = monothelite
						religion = iconoclast
						religion_openly_hellenic_or_reformed_trigger = yes
						religion = miaphysite
						religion = monophysite
						religion = apostolic
						religion = paulician
						religion = tondrakian
						religion = nestorian
						religion = messalian
					}
				}
			}
			capital_scope = {
				kingdom = {
					if = {
						limit = { NOT = { has_title_flag = emergency_empire_title } }
						set_title_flag = emergency_empire_title
						create_title = {
							tier = EMPEROR
							landless = no
							temporary = no
							custom_created = yes
							culture = ROOT
							holder = ROOT
							base_title = THIS
						}
						new_title = {
							set_title_flag = custom_created_title
							copy_title_laws = e_latin_empire
							make_primary_title = yes
						}
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					religion = chalcedonian
					religion = orthodox
					religion = bogomilist
					religion = monothelite
					religion = iconoclast
					religion_openly_hellenic_or_reformed_trigger = yes
					religion = miaphysite
					religion = monophysite
					religion = apostolic
					religion = paulician
					religion = tondrakian
					religion = nestorian
					religion = messalian
				}
				e_byzantium = { has_holder = no }
			}
			set_character_flag = centralize_without_penalties
			e_byzantium = {
				gain_title = ROOT
				hidden_tooltip = {
					copy_title_laws = e_latin_empire
					copy_title_history = e_latin_empire
				}
			}
			clr_character_flag = centralize_without_penalties
			any_title = {
				limit = {
					rebel = no
					has_holder = yes
					is_primary_holder_title = yes
					holder_scope = { top_liege = { character = PREV } }
				}
				holder_scope = {
					if = {
						limit = { has_weak_claim = e_latin_empire }
						add_weak_pressed_claim = e_byzantium
						remove_claim = e_latin_empire
					}
					if = {
						limit = { has_strong_claim = e_latin_empire }
						add_pressed_claim = e_byzantium
						remove_claim = e_latin_empire
					}
					any_realm_character = {
						if = {
							limit = { has_weak_claim = e_latin_empire }
							add_weak_pressed_claim = e_byzantium
							remove_claim = e_latin_empire
						}
						if = {
							limit = { has_strong_claim = e_latin_empire }
							add_pressed_claim = e_byzantium
							remove_claim = e_latin_empire
						}
					}
				}
			}
		}
		e_latin_empire = {
			destroy_landed_title = yes
		}
		hidden_tooltip = {
			any_vassal = {
				limit = {
					NOT = { has_character_flag = considered_for_independence }
					primary_title = { de_jure_liege_or_above = e_latin_empire }
				}
				character_event = { id = Plus.430 days = 3 }
			}
		}
		ai_chance = {
			factor = 2
			modifier = {
				factor = 0
				trait = cynical
			}
			modifier = {
				factor = 0
				trait = ambitious
			}
		}
	}

	option = {
		name = "I_WILL_CONVERT" #Then I will convert!
		trigger = {
			NOT = { trait = zealous}
			OR = {
				religion_group = christian
				is_pagan_religion = yes
			}
			completely_controls = c_byzantion
			c_byzantion = {
				location = {
					OR = {
						religion = chalcedonian
						is_catholic_branch = yes
					}
				}
			}
		}
		if = {
			limit = {
				is_pagan_religion = yes
			}
			add_trait = sympathy_pagans
		}
		if = {
			limit = {
				religion_group = christian
			}
			add_trait = sympathy_christendom
		}
		c_byzantion = { location = { reverse_religion = ROOT } }
		add_character_modifier = { name = recently_converted duration = 730}
		ai_chance = {
			factor = 5
			modifier = {
				factor = 0
				trait = content
			}
			modifier = {
				factor = 2
				culture_group = byzantine
			}
		}
	}
}

# 328: Byzantium Auto-Destroy Mechanic. Destroys Byzantium if the title holder is not Orthodox or Hellenic
character_event = {
	id = Plus.328
	desc = "EVTDESC_Plus_328"
	picture = "GFX_evt_council"

	is_triggered_only = yes
	hide_from = yes

	only_independent = yes
	only_playable = yes

	trigger = {
		OR = {
			NOT = { has_character_flag = checked_for_ere_autodestruct }
			had_character_flag = { flag = checked_for_ere_autodestruct days = 90 }
		}
		has_landed_title = e_byzantium
		NOT = {
			any_realm_title = {
				NOT = { title = e_byzantium }
				tier = EMPEROR
			}
		}
		NOR = {
			religion = chalcedonian
			religion = orthodox
			religion = bogomilist
			religion = monothelite
			religion = iconoclast
			religion_openly_hellenic_or_reformed_trigger = yes
			religion = miaphysite
			religion = monophysite
			religion = apostolic
			religion = paulician
			religion = tondrakian
			religion = nestorian
			religion = messalian
			AND = {
				e_latin_empire = { has_holder = yes }
				is_catholic_branch = yes
			}
		}
		war = no
	}

	immediate = { set_character_flag = checked_for_ere_autodestruct }

	option = {
		name = "OK"
		if = {
			limit = {
				OR = {
					e_latin_empire = { has_holder = yes }
					NOT = { is_catholic_branch = yes }
				}
			}
			capital_scope = {
				kingdom = {
					if = {
						limit = { NOT = { has_title_flag = emergency_empire_title } }
						set_title_flag = emergency_empire_title
						create_title = {
							tier = EMPEROR
							landless = no
							temporary = no
							custom_created = yes
							culture = ROOT
							holder = ROOT
							base_title = THIS
						}
						new_title = {
							set_title_flag = custom_created_title
							copy_title_laws = e_byzantium
							revoke_law = kingdom_lockout_2
							revoke_law = kingdom_lockout_1
							revoke_law = kingdom_lockout_0
							add_law = kingdom_lockout_0
							add_law = feudal_administration
							make_primary_title = yes
						}
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					religion = chalcedonian
					is_catholic_branch = yes
				}
				e_latin_empire = { has_holder = no }
			}
			set_character_flag = centralize_without_penalties
			e_latin_empire = {
				gain_title = ROOT
				hidden_tooltip = {
					copy_title_laws = e_byzantium
					copy_title_history = e_byzantium
				}
			}
			hidden_tooltip = {
				any_title = {
					limit = {
						rebel = no
						has_holder = yes
						is_primary_holder_title = yes
						holder_scope = { top_liege = { character = PREV } }
					}
					holder_scope = {
						if = {
							limit = { has_weak_claim = e_byzantium }
							add_weak_pressed_claim = e_latin_empire
							remove_claim = e_byzantium
						}
						if = {
							limit = { has_strong_claim = e_byzantium }
							add_pressed_claim = e_latin_empire
							remove_claim = e_byzantium
						}
						any_realm_character = {
							if = {
								limit = { has_weak_claim = e_byzantium }
								add_weak_pressed_claim = e_latin_empire
								remove_claim = e_byzantium
							}
							if = {
								limit = { has_strong_claim = e_byzantium }
								add_pressed_claim = e_latin_empire
								remove_claim = e_byzantium
							}
						}
					}
				}
			}
			clr_character_flag = centralize_without_penalties
		}
		e_byzantium = {
			destroy_landed_title = yes
		}
		hidden_tooltip = {
			any_vassal = {
				limit = {
					NOT = { has_character_flag = considered_for_independence }
					primary_title = { de_jure_liege_or_above = e_byzantium }
				}
				character_event = { id = Plus.430 days = 3 }
			}
		}
		ai_chance = {
			factor = 2
			modifier = {
				factor = 0
				trait = cynical
			}
			modifier = {
				factor = 0
				trait = ambitious
			}
		}
	}
	option = {
		name = "I_WILL_CONVERT" #Then I will convert!
		trigger = {
			NOT = { trait = zealous}
			OR = {
				religion_group = christian
				is_pagan_religion = yes
			}
			completely_controls = c_byzantion
			c_byzantion = {
				location = {
					OR = {
						religion = chalcedonian
						religion = orthodox
						religion = bogomilist
						religion = monothelite
						religion = iconoclast
						religion_openly_hellenic_or_reformed_trigger = yes
						religion = miaphysite
						religion = monophysite
						religion = apostolic
						religion = paulician
						religion = tondrakian
						religion = nestorian
						religion = messalian
					}
				}
			}
		}
		if = {
			limit = {
				is_pagan_religion = yes
				c_byzantion = {
					location = {
						religion_group = christian
					}
				}
			}
			add_trait = sympathy_pagans
		}
		if = {
			limit = {
				religion_group = christian
				c_byzantion = {
					location = {
						religion_openly_hellenic_or_reformed_trigger = yes
					}
				}
			}
			add_trait = sympathy_christendom
		}
		c_byzantion = { location = { reverse_religion = ROOT } }
		add_character_modifier = { name = recently_converted duration = 730}
		ai_chance = {
			factor = 5
			modifier = {
				factor = 0
				trait = content
			}
		}
	}
}

# 329: Norman conquest of England cleanup - Victory: France loses claims
character_event = {
	id = Plus.329

	hide_window = yes
	is_triggered_only = yes

	only_rulers = yes
	has_global_flag = bm_stamford

	trigger = {
		has_landed_title = k_france
		has_global_flag = witan_abolished
		any_claim = {
			OR = {
				location = { region = custom_england }
				capital_scope = { region = custom_england }
				title = d_normandy
				de_jure_liege_or_above = d_normandy
			}
		}
	}

	weight_multiplier = {
		days = 1
	}

	immediate = {
		clr_global_flag = bm_stamford
		any_claim = {
			limit = {
				OR = {
					location = { region = custom_england }
					capital_scope = { region = custom_england }
					title = d_normandy
					de_jure_liege_or_above = d_normandy
				}
			}
			remove_claim = ROOT
		}
	}
}

# 330: Norman conquest of England cleanup - Loss: English provinces (back) to England
character_event = {
	id = Plus.330

	hide_window = yes
	is_triggered_only = yes

	only_rulers = yes
	has_global_flag = bm_stamford
	war = no

	trigger = {
		has_landed_title = d_normandy
		k_england = { holder_scope = { culture = saxon } }
		any_realm_title = {
			OR = {
				location = { region = custom_england }
				capital_scope = { region = custom_england }
			}
		}
		NOT = { has_global_flag = witan_abolished }
	}

	weight_multiplier = {
		days = 1
	}

	immediate = {
		clr_global_flag = bm_stamford
		k_england = {
			holder_scope = {
				k_england = {
					any_de_jure_vassal_title = {
						limit = {
							holder_scope = {
								OR = {
									character = ROOT
									is_liege_or_above = ROOT
								}
							}
						}
						gain_title = PREVPREV
					}
				}
			}
		}
		if = {
			limit = { NOT = { has_claim = k_england } }
			add_claim = k_england
		}
	}
}

# 331: Fix changed CoA's and names
character_event = {
	id = Plus.331

	hide_window = yes
	is_triggered_only = yes
	ai = no

	immediate = {
		k_england = {
			if = {
				limit = {
					holder_scope = { dynasty = 106 } # Plantagenet
				}
				set_coa = k_plantagenet
				d_canterbury = { set_coa = d_canterbury_norman }
				d_cornwall = { set_coa = d_cornwall_norman }
				d_gloucester = { set_coa = d_gloucester_norman }
				d_hereford = { set_coa = d_hereford_norman }
				d_lancaster = { set_coa = d_lancaster_norman }
				d_norfolk = { set_coa = d_norfolk_norman }
				d_oxford = { set_coa = d_oxford_norman }
				d_somerset = { set_coa = d_somerset_norman }
				d_york = { set_coa = d_york_norman }
			}
			else_if = {
				limit = { has_title_flag = england_is_saxon }

				set_coa = k_england_saxon
				d_canterbury = { set_coa = d_canterbury_saxon }
				d_cornwall = { set_coa = d_cornwall_saxon }
				d_gloucester = { set_coa = d_gloucester_saxon }
				d_hereford = { set_coa = d_hereford_saxon }
				d_lancaster = { set_coa = d_lancaster_saxon }
				d_norfolk = { set_coa = d_norfolk_saxon }
				d_oxford = { set_coa = d_oxford_saxon }
				d_somerset = { set_coa = d_somerset_saxon }
				d_york = { set_coa = d_york_saxon }
			}
			else_if = {
				limit = { has_title_flag = england_is_norman }

				set_coa = k_england_norman
				d_canterbury = { set_coa = d_canterbury_norman }
				d_cornwall = { set_coa = d_cornwall_norman }
				d_gloucester = { set_coa = d_gloucester_norman }
				d_hereford = { set_coa = d_hereford_norman }
				d_lancaster = { set_coa = d_lancaster_norman }
				d_norfolk = { set_coa = d_norfolk_norman }
				d_oxford = { set_coa = d_oxford_norman }
				d_somerset = { set_coa = d_somerset_norman }
				d_york = { set_coa = d_york_norman }
			}
			else_if = {
				limit = { has_title_flag = england_is_norwegian }

				set_coa = k_englandnorwegian
				d_canterbury = { set_coa = d_canterbury_saxon }
				d_cornwall = { set_coa = d_cornwall_saxon }
				d_gloucester = { set_coa = d_gloucester_saxon }
				d_hereford = { set_coa = d_hereford_saxon }
				d_lancaster = { set_coa = d_lancaster_saxon }
				d_norfolk = { set_coa = d_norfolk_saxon }
				d_oxford = { set_coa = d_oxford_saxon }
				d_somerset = { set_coa = d_somerset_saxon }
				d_york = { set_coa = d_york_saxon }
			}
		}
		k_carpathia = {
			if = {
				limit = { has_title_flag = carpathia_is_avaria }
				set_coa = k_avaria
			}
		}
		d_finland = {
			if = {
				limit = { has_title_flag = finland_is_satakunta }
				set_coa = d_satakunta
			}
		}
	}
}

# TODO: Change The Third Temple into a Wonder
# 332: Stops construction of the Third Temple if it is underway
province_event = {
	id = Plus.332

	hide_window = yes

	trigger = {
		province_id = 774
		has_province_flag = building_third_temple
		has_province_modifier = third_temple_builder
		OR = {
			NOT = { religion = jewish }
			owner = { top_liege = { NOT = { religion = jewish } } }
			owner = { top_liege = { NOT = { completely_controls = c_jerusalem } } }
		}
	}

	mean_time_to_happen = {
		days = 1
	}

	immediate = {
		clr_province_flag = building_third_temple
		remove_province_modifier = third_temple_builder
	}
}

# 333: Finishes construction of the Third Temple
province_event = {
	id = Plus.333

	hide_window = yes

	trigger = {
		religion = jewish
		province_id = 774
		has_province_flag = building_third_temple
		NOT = { has_province_modifier = third_temple_builder }
		owner = {
			war = no
			top_liege = {
				war = no
				religion = jewish
				completely_controls = c_jerusalem
			}
		}
	}

	mean_time_to_happen = {
		days = 1
	}

	immediate = {
		clr_province_flag = building_third_temple
		set_province_flag = third_temple_built
		owner = {
			top_liege = { narrative_event = { id = SoA.101 } }
		}
	}
}

# 336: Get rid of siege effects once war is done
character_event = {
	id = Plus.336

	hide_window = yes

	has_character_flag = has_siege_effect
	war = no

	trigger = {
		NOR = {
			war = yes
			liege = { war = yes }
		}
		in_siege = no
		OR = {
			has_character_modifier = stalwart_defender
			has_character_modifier = left_at_siege
			has_character_modifier = escaped_siege
			has_character_flag = defending_the_castle
			any_courtier = {
				OR = {
					has_character_modifier = stalwart_defender
					has_character_modifier = left_at_siege
					has_character_modifier = escaped_siege
					has_character_flag = defending_the_castle
				}
			}
		}
	}

	mean_time_to_happen = {
		days = 30
	}

	immediate = {
		clr_character_flag = has_siege_effect
		clr_character_flag = defending_the_castle
		remove_character_modifier = stalwart_defender
		remove_character_modifier = left_at_siege
		remove_character_modifier = escaped_siege
		if = {
			limit = { is_ruler = yes }
			any_courtier = {
				limit = {
					has_character_flag = has_siege_effect
					NOR = {
						war = yes
						liege = { war = yes }
					}
					in_siege = no
				}
				clr_character_flag = has_siege_effect
				clr_character_flag = defending_the_castle
				remove_character_modifier = stalwart_defender
				remove_character_modifier = left_at_siege
				remove_character_modifier = escaped_siege
			}
		}
	}
}

# 337: Clear siege modifiers/hiding trait if imprisoned
character_event = {
	id = Plus.337

	hide_window = yes
	is_triggered_only = yes

	prisoner = yes

	trigger = {
		OR = {
			is_inaccessible_trigger = yes
			has_character_modifier = stalwart_defender
			has_character_modifier = left_at_siege
			has_character_modifier = escaped_siege
			has_character_flag = defending_the_castle
			has_character_flag = has_siege_effect
		}
	}

	immediate = {
		end_inaccessibility_effect = yes
		remove_character_modifier = stalwart_defender
		remove_character_modifier = left_at_siege
		remove_character_modifier = escaped_siege
		clr_character_flag = has_siege_effect
		clr_character_flag = defending_the_castle
		clr_character_flag = in_hiding_murder
		clr_character_flag = in_hiding_siege
	}
}

# 338: HRE Auto-Destroy Mechanic. Destroys the HRE if the ruler is no longer Catholic (or replacement heresy)
character_event = {
	id = Plus.338
	desc = "EVTDESC_Plus_338"
	picture = "GFX_evt_council"

	is_triggered_only = yes
	hide_from = yes

	only_independent = yes
	only_playable = yes

	trigger = {
		OR = {
			NOT = { has_character_flag = checked_for_hre_autodestruct }
			had_character_flag = { flag = checked_for_hre_autodestruct days = 90 }
		}
		has_landed_title = e_hre
		NOT = {
			any_realm_title = {
				NOT = { title = e_hre }
				tier = EMPEROR
			}
		}
		NOR = {
			religion = chalcedonian
			is_catholic_branch = yes
		}
		war = no
	}

	immediate = {
		set_character_flag = checked_for_hre_autodestruct
	}

	option = {
		name = "OK"
		if = {
			limit = { trait = crowned_by_pope }
			remove_trait = crowned_by_pope
			add_trait = crowned # Lets keep ordinary trait here, papal coronation shouldn't matter to pagans.
		}
		if = {
			limit = {
				OR = {
					e_germany = { has_holder = yes }
					NOT = { german_cultures_trigger = yes }
				}
			}
			capital_scope = {
				kingdom = {
					if = {
						limit = { NOT = { has_title_flag = emergency_empire_title } }
						set_title_flag = emergency_empire_title
						create_title = {
							tier = EMPEROR
							landless = no
							temporary = no
							custom_created = yes
							culture = ROOT
							holder = ROOT
							base_title = THIS
						}
						new_title = {
							set_title_flag = custom_created_title
							copy_title_laws = e_hre
							revoke_law = kingdom_lockout_2
							revoke_law = kingdom_lockout_1
							revoke_law = kingdom_lockout_0
							add_law = kingdom_lockout_0
							make_primary_title = yes
						}
					}
				}
			}
		}
		if = {
			limit = {
				german_cultures_trigger = yes
				e_germany = { has_holder = no }
			}
			if = {
				limit = { NOT = { is_title_active = e_germany } }
				activate_title = { title = e_germany status = yes }
			}
			set_character_flag = centralize_without_penalties
			e_germany = {
				gain_title = ROOT
				hidden_tooltip = {
					copy_title_laws = e_hre
				}
				make_primary_title = yes
			}
			hidden_tooltip = {
				any_title = {
					limit = {
						rebel = no
						has_holder = yes
						is_primary_holder_title = yes
						holder_scope = { top_liege = { character = PREV } }
					}
					holder_scope = {
						if = {
							limit = { has_weak_claim = e_hre }
							add_weak_pressed_claim = e_germany
							remove_claim = e_hre
						}
						if = {
							limit = { has_strong_claim = e_hre }
							add_pressed_claim = e_germany
							remove_claim = e_hre
						}
						any_realm_character = {
							if = {
								limit = { has_weak_claim = e_hre }
								add_weak_pressed_claim = e_germany
								remove_claim = e_hre
							}
							if = {
								limit = { has_strong_claim = e_hre }
								add_pressed_claim = e_germany
								remove_claim = e_hre
							}
						}
					}
				}
			}
			clr_character_flag = centralize_without_penalties
		}
		e_hre = {
			destroy_landed_title = yes
		}
		hidden_tooltip = {
			any_vassal = {
				limit = {
					NOT = { has_character_flag = considered_for_independence }
					primary_title = { de_jure_liege_or_above = e_hre }
				}
				character_event = { id = Plus.430 days = 3 }
			}
		}
		ai_chance = {
			factor = 2
			modifier = {
				factor = 0
				trait = ambitious
			}
		}
	}

	option = {
		name = "I_WILL_CONVERT" #Then I will convert!
		trigger = {
			NOT = { trait = zealous}
			OR = {
				religion_group = christian
				is_pagan_religion = yes
			}
			capital_scope = {
				OR = {
					region = custom_frisia
					region = custom_germany
					region = custom_lotharingia
					region = custom_pomerania
					region = custom_poland
					region = custom_bohemia
					region = custom_france
					region = custom_aquitaine
				}
				OR = {
					religion = chalcedonian
					religion = catholic
					religion = cathar
					religion = fraticelli
					religion = waldensian
					religion = lollard
					religion = adoptionist
				}
			}
		}
		if = {
			limit = {
				is_pagan_religion = yes
			}
			add_trait = sympathy_pagans
		}
		capital_scope = { reverse_religion = ROOT }
		add_character_modifier = { name = recently_converted duration = 730}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 0
				trait = content
			}
			modifier = {
				factor = 4
				german_cultures_trigger = yes
			}
		}
	}
}

# 339: Change scarred/beauty trait on females
character_event = {
	id = Plus.339

	hide_window = yes
	is_triggered_only = yes

	only_women = yes

	trigger = {
		OR = {
			trait = scarred
			AND = {
				trait = beauty
				age = 45
				immortal = no
			}
		}
	}

	weight_multiplier = {
		days = 1
	}

	immediate = {
		if = {
			limit = { trait = scarred }
			remove_trait = scarred
			add_trait = scarred_female
		}
		if = {
			limit = {
				trait = beauty
				age = 45
			}
			remove_trait = beauty
		}
	}
}

# 340: Clean up 'children serving in holy orders' chains upon appropriate parent death
character_event = {# called on_death (so succession has not yet resolved?)
	id = Plus.340

	hide_window = yes
	is_triggered_only = yes

	has_dlc = "The Old Gods"

	trigger = {
		any_child = {
			is_alive = yes
			OR = {
				has_character_flag = wants_gwydion
				has_character_flag = serving_varangian
				has_character_flag = wants_fianna
				has_character_flag = serving_celtic_order
			}
			has_opinion_modifier = { who = ROOT modifier = allowed_to_serve_holy_order }
		}
	}

	immediate = {
		any_child = {
			limit = {
				is_alive = yes
				is_heir = no
				OR = {
					has_character_flag = serving_celtic_order
					has_character_flag = wants_gwydion
					has_character_flag = wants_fianna
				}
				has_opinion_modifier = { who = ROOT modifier = allowed_to_serve_holy_order }
			}
			if = {
				limit = {
					has_character_flag = serving_celtic_order
				}
				random_list = {
					120 = {
						modifier = {
							factor = 1.33
							trait = brave
						}
						modifier = {
							factor = 0.8
							trait = craven
						}
						modifier = {
							factor = 0
							trait = scarred
						}
						character_event = { id = ancrel.124 }
					}
					75 = {
						modifier = {
							factor = 0
							is_maimed_trigger = yes
						}
						character_event = { id = ancrel.128 }
					}
					120 = {
						modifier = {
							factor = 0
							trait = brilliant_strategist
						}
						modifier = {
							factor = 0
							NOR = {
								trait = misguided_warrior
								trait = tough_soldier
								trait = skilled_tactician
							}
						}
						modifier = {
							factor = 2
							trait = genius
						}
						modifier = {
							factor = 1.33
							trait = diligent
						}
						modifier = {
							factor = 1.33
							OR = {
								trait = quick
								trait = shrewd
							}
						}
						modifier = {
							factor = 0.66
							is_dumb_trigger = yes
						}
						character_event = { id = ancrel.130 }
					}
					110 = {
						modifier = {
							factor = 0
							trait = depressed
						}
						modifier = {
							factor = 1.33
							trait = kind
						}
						modifier = {
							factor = 1.33
							trait = poet
						}
						modifier = {
							factor = 1.33
							trait = just
						}
						character_event = { id = ancrel.132 }
					}
					110 = {
						modifier = {
							factor = 1.33
							trait = lustful
						}
						character_event = { id = ancrel.134 }
					}
					120 = {
						modifier = {
							factor = 0.5
							trait = cynical
						}
						modifier = {
							factor = 0
							trait = zealous
						}
						character_event = { id = ancrel.136 }
					}
					140 = {
						modifier = {
							factor = 1.33
							trait = brave
						}
						modifier = {
							factor = 1.33
							is_strong_trigger = yes
						}
						modifier = {
							factor = 1.33
							OR = {
								trait = quick
								trait = shrewd
							}
						}
						modifier = {
							factor = 1.33
							trait = genius
						}
						modifier = {
							factor = 0.66
							trait = slothful
						}
						modifier = {
							factor = 0.66
							is_dumb_trigger = yes
						}
						character_event = { id = ancrel.138 }
					}
					100 = {
						modifier = {
							factor = 1.33
							trait = brave
						}
						modifier = {
							factor = 1.33
							trait = wroth
						}
						modifier = {
							factor = 1.33
							trait = head1
						}
						modifier = {
							factor = 1.33
							trait = head2
						}
						modifier = {
							factor = 1.33
							trait = head3
						}
						modifier = {
							factor = 1.33
							trait = head4
						}
						modifier = {
							factor = 1.33
							trait = head5
						}
						modifier = {
							factor = 0.8
							trait = craven
						}
						modifier = {
							factor = 1.33
							trait = drunkard
						}
						modifier = {
							factor = 1.33
							trait = has_tuberculosis
						}
						modifier = {
							factor = 1.33
							trait = has_typhoid_fever
						}
						modifier = {
							factor = 1.33
							trait = has_typhus
						}
						modifier = {
							factor = 1.33
							trait = has_bubonic_plague
						}
						modifier = {
							factor = 1.33
							trait = has_measles
						}
						modifier = {
							factor = 1.33
							trait = has_small_pox
						}
						modifier = {
							factor = 1.33
							trait = wounded
						}
						modifier = {
							factor = 2
							trait = infirm
						}
						modifier = {
							factor = 2
							is_incapable = yes
						}
						character_event = { id = ancrel.140 }
					}
					120 = {
						modifier = {
							factor = 1.33
							trait = greedy
						}
						modifier = {
							factor = 1.33
							stewardship = 10
						}
						character_event = { id = ancrel.142 }
					}
					1000 = {
						#child stays with order, clean up flags
						clr_character_flag = serving_celtic_order
					}
				}
			}
			if = {
				limit = {
					OR = {
						has_character_flag = wants_gwydion
						has_character_flag = wants_fianna
					}
				}
				#chance to stay with the order (and eventually gain their veteran trait) or leave without it
				random_list = {
					50 = { #stay
						modifier = {
							factor = 1.25
							trait = zealous
						}
						modifier = {
							factor = 1.25
							trait = brave
						}
					}
					50 = { #leave
						modifier = {
							factor = 1.25
							trait = ambitious
						}
						clr_character_flag = wants_gwydion
						clr_character_flag = wants_fianna
						move_character = ROOT
					}
				}
			}
		}
		any_child = {
			limit = {
				is_alive = yes
				has_opinion_modifier = { who = ROOT modifier = allowed_to_serve_holy_order }
				has_character_flag = serving_varangian
			}
			if = {
				limit = { any_heir_title = { holder = ROOT } }
				move_character = ROOT
				character_event = { id = TOG.3134 }
			}
			if = {
				limit = { NOT = { any_heir_title = { holder = ROOT } } }
				character_event = { id = TOG.3135 }
			}
		}
	}
}

# 341: Ultimatum to overthrown rulers who re-inherit the throne
# ROOT is the character, FROM is the title, FROMFROM is the old holder
character_event = {
	id = Plus.341

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		character_event = { id = Plus.342 days = 3 }
	}
}

# 342: Ultimatum to overthrown rulers who re-inherit the throne
# ROOT/FROM is the new holder, FROMFROM is the title
character_event = {
	id = Plus.342
	desc = "EVTDESC_Plus_341"
	picture = "GFX_evt_council"

	is_triggered_only = yes

	trigger = {
		FROMFROM = {
			has_holder = yes
			is_primary_holder_title_tier = yes
		}
		any_vassal = {
			has_opinion_modifier = { who = ROOT modifier = overthrown_ruler }
			relative_power = { who = ROOT power = 0.25 }
		}
	}

	immediate = {
		#assess power of demanders
		hidden_tooltip = {
			set_variable = { which = "ultimatum_power" value = "0" }
			any_realm_character = {
				limit = {
					is_landed = yes
					has_opinion_modifier = { who = ROOT modifier = overthrown_ruler }
					de_jure_liege_or_above = ROOT
				}
				if = {
					limit = {
						relative_power = { who = ROOT power = 0.25 }
						NOT = { relative_power = { who = ROOT power = 0.5 } }
					}
					ROOT = { change_variable = { which = "ultimatum_power" value = "0.25" } }
				}
				if = {
					limit = {
						relative_power = { who = ROOT power = 0.5 }
						NOT = { relative_power = { who = ROOT power = 0.75 } }
					}
					ROOT = { change_variable = { which = "ultimatum_power" value = "0.5" } }
				}
				if = {
					limit = {
						relative_power = { who = ROOT power = 0.75 }
						NOT = { relative_power = { who = ROOT power = 1 } }
					}
					ROOT = { change_variable = { which = "ultimatum_power" value = "0.75" } }
				}
				if = {
					limit = {
						relative_power = { who = ROOT power = 1 }
					}
					ROOT = { change_variable = { which = "ultimatum_power" value = "1" } }
				}
			}
		}
	}

	option = {
		name = "EVTDEMANDYES"
		#abdicate to next in line
		ai_chance = {
			factor = 50
			modifier = {
				factor = 1.25
				is_weak_trigger = yes
			}
			modifier = {
				factor = 1.25
				trait = craven
			}
			modifier = {
				factor = 1.25
				trait = humble
			}
			modifier = {
				factor = 1.25
				trait = kind
			}
			modifier = {
				factor = 1.25
				trait = charitable
			}
			modifier = {
				factor = 1.25
				trait = patient
			}
			modifier = {
				factor = 1.25
				trait = content
			}
		}
		current_heir = {
			ROOT = { transfer_scaled_wealth = { to = PREV value = all } }
		}
		abdicate = yes
	}

	option = {
		name = "EVTDEMANDNO" #reject demand
		ai_chance = {
			factor = 50
			modifier = {
				factor = 1.25
				is_strong_trigger = yes
			}
			modifier = {
				factor = 1.25
				trait = brave
			}
			modifier = {
				factor = 1.25
				trait = proud
			}
			modifier = {
				factor = 1.25
				trait = envious
			}
			modifier = {
				factor = 1.25
				trait = greedy
			}
			modifier = {
				factor = 1.25
				trait = wroth
			}
			modifier = {
				factor = 1.25
				trait = ambitious
			}
			modifier = {
				factor = 5.0
				NOT = { check_variable = { which = "ultimatum_power" value = "1" } }
			}
			modifier = {
				factor = 0.75
				check_variable = { which = "ultimatum_power" value = "1" }
			}
		}
		#a direct-vassal demander with sufficient power declares war, other demanders follow suit
		random_vassal = {
			limit = {
				de_jure_liege = ROOT
				has_opinion_modifier = { who = ROOT modifier = overthrown_ruler }
				relative_power = { who = ROOT power = 0.25 }
			}
			war = {
				target = ROOT
				casus_belli = overthrow_ruler
			}
			ROOT = {
				any_vassal = {
					limit = {
						has_opinion_modifier = { who = ROOT modifier = overthrown_ruler }
					}
					join_attacker_wars = PREVPREV
				}
			}
		}
	}
}

# 343: Secondary Startup Event for RD rulers
character_event = {
	id = Plus.343

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# properly set Agnatic-Cognatic succession default for female rulers
		if = {
			limit = {
				is_female = yes
				primary_title = { has_law = agnatic_succession }
			}
			primary_title = {
				add_law = {
					law = cognatic_succession
					cooldown = no
					opinion_effect = no
				}
			}
			recalc_succession = yes
		}

		# get rid of TOM's caused by councillors being fired
		any_vassal = {
			if = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_fired_from_council } }
				remove_opinion = { who = ROOT modifier = opinion_fired_from_council }
			}
			if = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_recently_fired } }
				remove_opinion = { who = ROOT modifier = opinion_recently_fired }
			}
		}
		any_courtier = {
			if = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_fired_from_council } }
				remove_opinion = { who = ROOT modifier = opinion_fired_from_council }
			}
			if = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_recently_fired } }
				remove_opinion = { who = ROOT modifier = opinion_recently_fired }
			}
		}
	}
}

# 345: Removes In Hiding trait from characters who no longer have someone to remove it
character_event = {
	id = Plus.345

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_inaccessible_trigger = yes
		is_ruler = no
		in_siege = no
		liege = { war = no }
		NOR = {
			AND = {
				has_character_flag = in_hiding_murder
				liege = {
					OR = {
						any_spouse = { character = ROOT }
						any_child = { character = ROOT }
					}
				}
			}
			AND = {
				has_character_flag = in_hiding_siege
				liege = { is_close_relative = ROOT }
			}
			has_character_modifier = in_seclusion
		}
	}

	weight_multiplier = {
		days = 1
	}

	immediate = {
		end_inaccessibility_effect = yes
		clr_character_flag = in_hiding_murder
		clr_character_flag = in_hiding_siege
	}
}

# 346: Removes austerity modifier from non-AI characters
character_event = {
	id = Plus.346

	hide_window = yes
	is_triggered_only = yes
	ai = no

	trigger = {
		has_character_modifier = ai_austerity
	}

	weight_multiplier = {
		days = 1
	}

	immediate = {
		remove_character_modifier = ai_austerity
	}
}

# 348: Viceroys will try to pass on wealth to a relative instead of their liege
character_event = {
	id = Plus.348

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		any_demesne_title = { is_vice_royalty = yes }
	}

	immediate = {
		any_demesne_title = {
			limit = { is_vice_royalty = yes }
			save_event_target_as = lose_strong
			ROOT = {
				any_child = {
					limit = {
						is_alive = yes
						NOT = { has_strong_claim = PREVPREV }
					}
					character_event = { id = Plus.355 days = 1 }
				}
			}
		}
		if = {
			limit = { primary_title = { is_vice_royalty = yes } }
			random_demesne_title = {
				limit = {
					OR = {
						AND = {
							tier = DUKE
							ROOT = { primary_title = { tier = KING } }
						}
						AND = {
							tier = COUNT
							ROOT = {
								primary_title = { tier = KING }
								NOT = {
									any_demesne_title = {
										tier = DUKE
										is_vice_royalty = no
									}
								}
							}
						}
						AND = {
							tier = COUNT
							ROOT = { primary_title = { tier = DUKE } }
						}
						is_vice_royalty = no
						current_heir = {
							NOT = { is_liege_of = ROOT }
						}
					}
				}
				current_heir = {
					save_event_target_as = target_viceroy_heir
				}
			}
			if = {
				limit = { NOT = { event_target:target_viceroy_heir = { is_alive = yes } } }
				clear_wealth = yes
				remove_character_modifier = loan_50
				remove_character_modifier = loan_50_hidden
				remove_character_modifier = loan_100
				remove_character_modifier = loan_100_hidden
				remove_character_modifier = loan_200
				remove_character_modifier = loan_200_hidden
				remove_character_modifier = loan_400
				remove_character_modifier = loan_400_hidden
				remove_character_modifier = loan_600
				remove_character_modifier = loan_600_hidden
				remove_character_modifier = loan_800
				remove_character_modifier = loan_800_hidden
				remove_character_modifier = loan_1000
				remove_character_modifier = loan_1000_hidden
				remove_character_modifier = loan_timer_jews
				remove_character_modifier = borrowed_from_jews
				break = yes
			}
			event_target:target_viceroy_heir = {
				ROOT = {
					transfer_scaled_wealth = {
						to = PREV
						value = all
					}
				}
			}
			if = {
				limit = { has_character_flag = loan_taken }
				if = {
					limit = { has_character_modifier = loan_50 }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_50
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_50
				}
				if = {
					limit = { has_character_modifier = loan_50_hidden }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_50_hidden
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = loan_50_hidden
				}
				if = {
					limit = { has_character_modifier = loan_100 }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_100
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_100
				}
				if = {
					limit = { has_character_modifier = loan_100_hidden }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_100_hidden
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = loan_100_hidden
				}
				if = {
					limit = { has_character_modifier = loan_200 }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_200
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_200
				}
				if = {
					limit = { has_character_modifier = loan_200_hidden }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_200_hidden
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = loan_200_hidden
				}
				if = {
					limit = { has_character_modifier = loan_400 }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_400
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_400
				}
				if = {
					limit = { has_character_modifier = loan_400_hidden }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_400_hidden
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = loan_400_hidden
				}
				if = {
					limit = { has_character_modifier = loan_600 }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_600
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_600
				}
				if = {
					limit = { has_character_modifier = loan_600_hidden }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_600_hidden
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = loan_600_hidden
				}
				if = {
					limit = { has_character_modifier = loan_800 }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_800
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_800
				}
				if = {
					limit = { has_character_modifier = loan_800_hidden }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_800_hidden
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = loan_800_hidden
				}
				if = {
					limit = { has_character_modifier = loan_1000 }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_1000
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_1000
				}
				if = {
					limit = { has_character_modifier = loan_1000_hidden }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = loan_1000_hidden
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = loan_1000_hidden
				}
				if = {
					limit = { has_character_modifier = loan_timer_jews }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = "loan_timer_jews"
							duration = 730
							inherit = yes
						}
					}
					remove_character_modifier = loan_timer_jews
				}
				if = {
					limit = { has_character_modifier = borrowed_from_jews }
					event_target:target_viceroy_heir = {
						add_character_modifier = {
							name = "borrowed_from_jews"
							duration = -1
							inherit = yes
							hidden = yes
						}
					}
					remove_character_modifier = borrowed_from_jews
				}
			}
		}
	}
}

# 349: Annual maintenance fixes
character_event = {
	id = Plus.349

	hide_window = yes
	is_triggered_only = yes

	only_rulers = yes

	immediate = {
		if = {
			limit = {
				ai = no
				check_variable = { which = "loan_amount" value = 0.1 }
			}
			set_variable = { which = "loan_amount" value = 0 }
			remove_character_modifier = loan_timer
		}
		#remove tribute status on non-independent overlords/tributes
		if = {
			limit = {
				is_tributary = yes
				OR = {
					independent = no
					suzerain = { independent = no }
				}
			}
			suzerain = {
				log = "---> (Annual Maintenance) [This.GetBestName] was removed as suzerain of [Root.GetBestName], as one of them is not independent"
				remove_tributary = ROOT
			}
		}

		#clear tributary years if no longer tributary
		#not tributary and has delete flag
		if = {
			limit = {
				NOR = {
					is_tributary = { type = forced }
					is_tributary = { type = voluntary }
				}
				primary_title = {
					check_variable = { which = "tributary_years" value = 0.5 }
					has_title_flag = delete_tributary_years
				}
			}
			primary_title = {
				set_variable = { which = "tributary_years" value = 0 }
				clr_title_flag = delete_tributary_years
			}
		}
		#not tributary but doesn't have delete flag - set the flag
		if = {
			limit = {
				NOR = {
					is_tributary = { type = forced }
					is_tributary = { type = voluntary }
					primary_title = { has_title_flag = delete_tributary_years }
				}
				primary_title = { check_variable = { which = "tributary_years" value = 0.5 } }
			}
			primary_title = { set_title_flag = delete_tributary_years }
		}
		#tributary but has delete flag, remove flag.
		if = {
			limit = {
				OR = {
					is_tributary = { type = forced }
					is_tributary = { type = voluntary }
				}
				primary_title = { has_title_flag = delete_tributary_years }
			}
			primary_title = { clr_title_flag = delete_tributary_years }
		}
		#transfer tributary years to another title
		if = {
			limit = {
				primary_title = {
					NOT = {
						check_variable = { which = "tributary_years" value = 0.5 }
					}
				}
				any_demesne_title = {
					check_variable = { which = "tributary_years" value = 0.5 }
				}
			}
			# copy randomly
			random_demesne_title = {
				limit = {
					is_primary_holder_title = no
					check_variable = { which = "tributary_years" value = 0.5 }
				}
				primary_title = { set_variable = { which = "tributary_years" which = PREV } }
				set_variable = { which = "tributary_years" value = 0 }
			}
		}

		#count tributary years
		if = {
			limit = {
				independent = yes
				OR = {
					is_tributary = { type = forced }
					is_tributary = { type = voluntary }
				}
			}
			primary_title = {
				change_variable = { which = "tributary_years" value = 1 }
			}
		}

		#track years_of_peace variable for the ambition
		if = {
			limit = { war = yes }
			set_variable = { which = "years_of_peace" value = 0 }
		}
		if = {
			limit = { war = no }
			change_variable = { which = "years_of_peace" value = 1 }
		}

		#fix primary titles that have become inactive
		if = {
			limit = {
				primary_title = { NOT = { is_title_active = THIS } }
			}
			primary_title = {
				log = "---> (Annual Maintenance) [This.GetFullName] was set to active, as it is currently held"
				activate_title = { title = THIS status = yes }
			}
		}

		#remove 'do not destroy' flag on titles that have raised crown authority
		any_demesne_title = {
			limit = {
				has_title_flag = do_not_destroy
				OR = {
					has_law = crown_authority_1
					has_law = crown_authority_2
					has_law = crown_authority_3
					has_law = crown_authority_4
				}
			}
			clr_title_flag = do_not_destroy
			log = "---> (Annual Maintenance) [This.GetFullName] had the do_not_destroy flag removed, as it has raised Crown Authority"
		}

		#remove 'destroy' flag on titles which were not destroyed
		any_demesne_title = {
			limit = { had_title_flag = { flag = destroy_title days = 7 } }
			clr_title_flag = destroy_title
		}

		#double-check imperial government status
		if = {
			limit = {
				has_imperial_government_trigger = yes
				in_revolt = no
				NOT = { any_liege = { in_revolt = yes } }
			}
			if = {
				limit = {
					independent = yes
					OR = {
						NOT = {
							primary_title = { has_law = imperial_administration }
						}
						lower_real_tier_than = EMPEROR
						AND = {
							tier = EMPEROR
							primary_title = { is_titular = yes}
						}
					}
					#in case character happens to have two imperial titles (which can happen for 30 days.)
					primary_title = {
						owner = {
							NOT = {
								any_realm_title = {
									tier = EMPEROR
									has_law = imperial_administration
									NOT = { title = PREVPREV}
								}
							}
						}
					}
				}
				log = "---> (Annual Maintenance) [Root.GetBestName] was switched to feudal government because [Root.PrimaryTitle.GetID] does not have Imperial Administration law"
				switch_to_feudal_effect = yes
				any_realm_lord = { character_event = { id = Plus.3299 } }
			}
			if = {
				limit = {
					independent = no
					top_liege = { has_imperial_government_trigger = no }
				}
				if = {
					limit = { top_liege = { has_imperial_government_trigger = no } }
					log = "---> (Annual Maintenance) [Root.GetBestName] was switched to feudal government because [Root.TopLiege.GetBestName] does not have Imperial Government"
				}
				switch_to_feudal_effect = yes
			}
		}
		if = {
			limit = {
				is_feudal = yes
				has_imperial_government_trigger = no
				in_revolt = no
				NOT = { any_liege = { in_revolt = yes } }
			}
			if = {
				limit = {
					independent = yes
					tier = EMPEROR
					primary_title = { has_law = imperial_administration }
				}
				log = "---> (Annual Maintenance) [Root.GetBestName] was switched to imperial government because [Root.PrimaryTitle.GetID] has Imperial Administration law"
				switch_to_imperial_effect = yes
				any_realm_lord = {
					limit = {
						is_liege_or_above = ROOT
						is_feudal = yes
						is_patrician = no
						has_imperial_government_trigger = no
						NAND = {
							controls_religion = yes
							NOT = { religion_group = muslim }
							is_pagan_religion = no
							NOT = { religion = paulician }
						}
						in_revolt = no
						NOT = { any_liege = { in_revolt = yes } }
					}
					switch_to_imperial_effect = yes
				}
			}
			if = {
				limit = {
					independent = no
					top_liege = { has_imperial_government_trigger = yes }
				}
				log = "---> (Annual Maintenance) [Root.GetBestName] was switched to imperial government because [Root.TopLiege.GetBestName] has imperial government"
				switch_to_imperial_effect = yes
			}
		}
		#remove imperial decadence if not emperor
		if = {
			limit = {
				NOT = { tier = EMPEROR }
				OR = {
					has_character_modifier = imperial_decadence_1
					has_character_modifier = imperial_decadence_2
					has_character_modifier = imperial_decadence_3
					has_character_modifier = imperial_decadence_4
					has_character_modifier = imperial_decadence_5
					has_character_modifier = imperial_decadence_6
					has_character_modifier = imperial_decadence_7
					has_character_modifier = imperial_decadence_8
				}
			}
			remove_character_modifier = imperial_decadence_1
			remove_character_modifier = imperial_decadence_2
			remove_character_modifier = imperial_decadence_3
			remove_character_modifier = imperial_decadence_4
			remove_character_modifier = imperial_decadence_5
			remove_character_modifier = imperial_decadence_6
			remove_character_modifier = imperial_decadence_7
			remove_character_modifier = imperial_decadence_8
			set_variable = { which = "imperial_decadence" value = "0" }
		}
	}
}

# 350: Fixing antipope removal
character_event = {
	id = Plus.350

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_claim = k_papal_state
		remove_claim = d_fraticelli
	}
}

# 351: Prevents quick rebellions in newly-conquered provinces
character_event = {
	id = Plus.351

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROM = { tier = COUNT }
		OR = {
			has_character_modifier = victory_timer
			has_character_modifier = new_land_timer
		}
	}

	immediate = {
		FROM = {
			location = {
				if = {
					limit = { has_province_modifier = province_chaos }
					remove_province_modifier = province_chaos
				}
				add_province_modifier = {
					name = province_chaos
					duration = 730
				}
			}
		}
	}
}

# 352: Refills levy holdings after switching to feudal
character_event = {
	id = Plus.352

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		any_demesne_title = {
			limit = { has_title_flag = refill_levy }
			clr_title_flag = refill_levy
			refill_holding_levy = yes
		}
	}
}

# 353: Adds Away From Court modifier when leading armies away from the capital
character_event = {
	id = Plus.353

	hide_window = yes

	only_rulers = yes
	only_playable = yes
	min_age = 16
	capable_only = yes
	prisoner = no

	trigger = {
		in_command = yes
		higher_tier_than = BARON
		OR = {
			war = yes
			any_liege = { war = yes }
		}
		NOT = { has_character_modifier = away_from_court }
		capital_scope = {
			ROOT = {
				location = {
					NOT = { province_id = PREVPREV }
				}
			}
		}
	}

	mean_time_to_happen = {
		days = 1
	}

	immediate = {
		set_character_flag = away_from_court
		add_character_modifier = {
			name = away_from_court
			duration = -1
		}
	}
}

# 354: Removes Away From Court modifier
character_event = {
	id = Plus.354

	hide_window = yes

	has_character_flag = away_from_court

	trigger = {
		has_character_modifier = away_from_court
		OR = {
			is_incapable = yes
			prisoner = yes
			is_playable = no
			NAND = {
				in_command = yes
				OR = {
					war = yes
					any_liege = { war = yes }
				}
				capital_scope = {
					ROOT = {
						location = {
							NOT = { province_id = PREVPREV }
						}
					}
				}
			}
		}
	}

	mean_time_to_happen = {
		days = 1
	}

	immediate = {
		remove_character_modifier = away_from_court
		clr_character_flag = away_from_court
	}
}

# 355: Removes child's strong claim to viceroyalty
character_event = {
	id = Plus.355

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		event_target:lose_strong = {
			ROOT = { has_strong_claim = PREV }
		}
	}

	immediate = {
		event_target:lose_strong = {
			remove_claim = ROOT
			add_weak_pressed_claim = ROOT
		}
	}
}

# 356: Removes claims for dead rulers
character_event = {
	id = Plus.356

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROMFROM = {
			has_claim = FROM
			is_alive = no
		}
	}

	immediate = {
		FROM = {
			remove_claim = FROMFROM
		}
	}
}

# 357: FREE

# 358: FREE

# 359: FREE

# 360: Religion head loses all claims as they gain the title
character_event = {
	id = Plus.360

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROM = {
			controls_religion = yes
			is_primary_holder_title = yes
		}
		is_theocracy = yes
		num_of_claims = 1
	}

	immediate = {
		any_claim = { remove_claim = ROOT }
	}
}

# 361: Lowborn marries a Duke or above
character_event = {
	id = Plus.361

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		new_character = {
			dynasty = none
		}
		FROM = {
			higher_tier_than = COUNT
			ai = yes
		}
	}

	immediate = {
		new_character = {
			random_list = {
				25 = { dynasty = random }
				75 = { dynasty = father_bastard }
			}
		}
	}
}

# 362: Rebel/Adventurer imprisoned after loss
character_event = {
	id = Plus.362

	hide_window = yes
	is_triggered_only = yes
	war = yes

	trigger = {
		primary_title = { temporary = yes }
		NOT = { any_demesne_title = { temporary = no } }
	}

	immediate = {
		character_event = { id = Plus.363 days = 7 }
	}
}

# 363: Rebel/Adventurer imprisoned after loss
character_event = {
	id = Plus.363

	hide_window = yes
	is_triggered_only = yes
	war = yes

	trigger = {
		primary_title = { temporary = yes }
		NOR = {
			any_demesne_title = { temporary = no }
			prisoner = yes
			is_at_sea = yes
			location = { is_land = yes }
		}
	}

	immediate = {
		log = "INFO: [Root.GetBestName] has lost all forces and is now imprisoned by [From.GetBestName]"
		any_war = {
			limit = { attacker = { character = ROOT } }
			defender = {
				ROOT = { imprison = PREV }
			}
		}
	}
}

# 364: Copy liege inheritance laws after giving title
character_event = {
	id = Plus.364

	# FROMFROM = character giving the title
	# FROM = the title being given
	# ROOT = the character receiving the title

	hide_window = yes
	is_triggered_only = yes

	ai = yes # Don't force a player to change inheritance rules

	trigger = {
		FROM = {
			is_primary_holder_title = yes
			NOR = {
				is_theocracy = yes
				tier = BARON
				title = k_pentarch_rome
			}
		}
		FROMFROM = {
			is_liege_of = ROOT
			is_alive = yes
			is_offmap_trigger = no
		}
	}

	immediate = {
		FROMFROM = { primary_title = { save_event_target_as = liege_primary_title } }
		log = "---> INFO: Correcting laws for [From.GetID]"
		character_event = { id = Plus.365 days = 1 } # Needs to be delayed a day as this won't work on the first day of inheritance
	}
}

# 365: Copy liege inheritance laws after giving title
character_event = {
	id = Plus.365

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		primary_title = {

		}
		if = {
			limit = {
				higher_real_tier_than = count # Don't want those below Duke getting the wrong succession types
				event_target:liege_primary_title = { # Don't want to copy special Empire-tier succession laws
					NOR = {
						has_law = succ_hre_elective
						has_law = succ_byzantine_elective
					}
				}
			}
			primary_title = { copy_title_laws = event_target:liege_primary_title }

		}
		if = {
			limit = { # Only copy the gender laws for lower than duke or for vassals in Princely/Imperial Elective realms
				OR = {
					NOT = { higher_real_tier_than = count }
					event_target:liege_primary_title = { # Don't want to copy special Empire-tier succession laws
						OR = {
							has_law = succ_hre_elective
							has_law = succ_byzantine_elective
						}
					}
				}
			}
			primary_title = { adjust_gender_law_effect = yes }
		}
		recalc_succession = yes
	}
}

# 366: Restore original name if title with regnal names is inherited by secular ruler
# ROOT is the character, FROM is the title, FROMFROM is the old holder
character_event = {
	id = Plus.366

	hide_window = yes
	is_triggered_only = yes

	only_rulers = yes

	trigger = {
		FROMFROM = { is_offmap_trigger = no }
		is_theocracy = no
		FROM = {
			OR = {
				title = k_pentarch_rome
				title = d_apostolic
				title = d_egyptian_pagan
				title = d_fraticelli
				title = d_iconoclast
				title = d_messalian
				title = d_miaphysite
				title = d_monophysite
				title = d_monothelite
				title = d_nestorian
				title = d_paulician
				title = k_orthodox
				title = k_papal_state
			}
		}
	}

	immediate = {
		set_name = ""
	}
}

# 368: Deal with landed varangians
character_event = {
	id = Plus.368

	hide_window = yes
	is_triggered_only = yes

	ai = yes
	min_age = 16
	only_men = yes
	capable_only = yes
	prisoner = no
	culture_group = north_germanic
	has_character_flag = serving_varangian

	trigger = {
		has_dlc = "The Old Gods"
	}

	immediate = {
		random_list = {
			120 = {
				modifier = {
					factor = 0
					trait = scarred
				}
				character_event = {id = TOG.3114 } # Son returns scarred but seasoned
			}
			110 = {
				modifier = {
					factor = 0
					trait = homosexual
				}
				character_event = {id = TOG.3116 } # Son returns with notions of Greek love
			}
			75 = {
				modifier = {
					factor = 0
					OR = {
						trait = eunuch
						trait = blinded
					}
				}
				character_event = {id = TOG.3118 } # Son returns castrated and blinded
			}
			120 = {
				modifier = {
					factor = 0
					trait = brilliant_strategist
				}
				modifier = {
					factor = 0
					NOT = {
						trait = misguided_warrior
						trait = tough_soldier
						trait = skilled_tactician
					}
				}
				character_event = {id = TOG.3120 } # Son returns as excellent strategist
			}
			110 = {
				modifier = {
					factor = 0
					trait = depressed
				}
				character_event = {id = TOG.3122 } # Son returns with PTSD
			}
			110 = {
				modifier = {
					factor = 0
					is_married = yes
				}
				character_event = {id = TOG.3124 } # Son returns home with Greek wife
			}
			120 = {
				modifier = {
					factor = 0
					is_pagan_religion = no
				}
				character_event = {id = TOG.3126 } # Son returns home as a Christian zealot
			}
			140 = {
				character_event = {id = TOG.3128 } # Son returns home as a seasoned warrior
			}
			120 = {
				character_event = {id = TOG.3132 } # Son returns with loot
			}
			500 = {
				clr_character_flag = serving_varangian # Nothing happens, just cleanup
			}
		}
	}
}

# 370: Gender law Plus
character_event = {
	id = Plus.370

	hide_window = yes
	is_triggered_only = yes

	ai = yes

	trigger = {
		has_global_flag = gender_equality
	}

	weight_multiplier = {
		days = 1
	}

	immediate = {
		FROM = {
			add_law = {
				law = true_cognatic_succession
				cooldown = no
				opinion_effect = no
			}
		}
	}
}

# 371: Main Maintenance Event
character_event = {
	id = Plus.371

	hide_window = yes
	is_triggered_only = yes

	religion = miaphysite

	trigger = {
		has_landed_title = d_miaphysite
	}

	immediate = {
		if = {
			limit = { is_ruler = yes }
			character_event = { id = Plus.349 days = 1 random = 30 }
			if = {
				limit = { tier = EMPEROR }
				character_event = { id = realmPlus.100 } # Shatter empire if too small
			}
		}
		any_independent_ruler = {
			#Randomise so we don't get a choke
			character_event = { id = Plus.349 days = 1 random = 30 }
			if = {
				limit = { tier = EMPEROR }
				character_event = { id = realmPlus.100 } # Shatter empire if too small
			}
			any_realm_lord = {
				character_event = { id = Plus.349 days = 1 random = 30 }
			}
		}

		# de jure empire fix
		any_title = {
			limit = {
				OR = {
					has_holder = yes
					is_titular = no
				}
				tier = KING
				NOR = {
					temporary = yes
					rebel = yes
					clan = yes
					adventurer = yes
					is_nomadic = yes
					empire = { always = yes }
				}
			}
			log = "[This.GetFullName] had to be made de jure to e_placeholder"
			de_jure_liege = e_placeholder
		}
	}
}

# 372: Checksum Warning Event
narrative_event = {
	id = Plus.372
	title = EVTNAME_Plus_372
	desc = EVTDESC_Plus_372
	picture = GFX_evt_bad_news

	is_triggered_only = yes
	hide_from = yes

	ai = no

	trigger = {
		has_global_flag = greeting_event
		supported_checksum = no
	}

	immediate = {
		set_global_flag = unsupported_checksum_warning
	}

	option = {
		name = OK
	}
}

# 373: ERE roman localisation
character_event = {
	id = Plus.373

	is_triggered_only = yes
	hide_window = yes

	ai = yes

	trigger = {
		has_landed_title = e_byzantium
	}

	#Don't use FROM scope in this event
	immediate = {
		if = {
			#if roman, always rename to ERE
			limit = { culture = roman }
			e_byzantium = {
				set_name = EARLY_ERE
				adjective = EARLY_ERE_ADJ
			}
		}
		if = {
			#if not roman - rename back to byzantine empire if either HRE or e_karling were ever formed
			limit = {
				NOT = { culture = roman }
				OR = {
					e_hre = { has_title_flag = hre_formed }
					e_karling = { has_title_flag = carolingian_empire_formed }
				}
			}
			e_byzantium = {
				set_name = ""
				adjective = ""
			}
		}
	}
}

# 374: Fix RD Immortal bounce
character_event = {
	id = Plus.374

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_player = {
			character_event = { id = Plus.375 }
		}
	}
}

# 375: Fix RD Immortal
character_event = {
	id = Plus.375

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		trait = immortal
	}

	immediate = {
		remove_trait = immortal
		add_trait = immortal
	}
}
